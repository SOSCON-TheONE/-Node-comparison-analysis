"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuantizationParameters = void 0;
var flatbuffers = __importStar(require("flatbuffers"));
var quantization_details_1 = require("../circle/quantization-details");
var QuantizationParameters = /** @class */ (function () {
    function QuantizationParameters() {
        this.bb = null;
        this.bb_pos = 0;
    }
    QuantizationParameters.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    QuantizationParameters.getRootAsQuantizationParameters = function (bb, obj) {
        return (obj || new QuantizationParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    QuantizationParameters.getSizePrefixedRootAsQuantizationParameters = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new QuantizationParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    QuantizationParameters.prototype.min = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    QuantizationParameters.prototype.minLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    QuantizationParameters.prototype.minArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    QuantizationParameters.prototype.max = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    QuantizationParameters.prototype.maxLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    QuantizationParameters.prototype.maxArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    QuantizationParameters.prototype.scale = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    QuantizationParameters.prototype.scaleLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    QuantizationParameters.prototype.scaleArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    QuantizationParameters.prototype.zeroPoint = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : this.bb.createLong(0, 0);
    };
    QuantizationParameters.prototype.zeroPointLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    QuantizationParameters.prototype.detailsType = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : quantization_details_1.QuantizationDetails.NONE;
    };
    QuantizationParameters.prototype.details = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    QuantizationParameters.prototype.quantizedDimension = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    QuantizationParameters.startQuantizationParameters = function (builder) {
        builder.startObject(7);
    };
    QuantizationParameters.addMin = function (builder, minOffset) {
        builder.addFieldOffset(0, minOffset, 0);
    };
    QuantizationParameters.createMinVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    };
    QuantizationParameters.startMinVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    QuantizationParameters.addMax = function (builder, maxOffset) {
        builder.addFieldOffset(1, maxOffset, 0);
    };
    QuantizationParameters.createMaxVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    };
    QuantizationParameters.startMaxVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    QuantizationParameters.addScale = function (builder, scaleOffset) {
        builder.addFieldOffset(2, scaleOffset, 0);
    };
    QuantizationParameters.createScaleVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    };
    QuantizationParameters.startScaleVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    QuantizationParameters.addZeroPoint = function (builder, zeroPointOffset) {
        builder.addFieldOffset(3, zeroPointOffset, 0);
    };
    QuantizationParameters.createZeroPointVector = function (builder, data) {
        builder.startVector(8, data.length, 8);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt64(data[i]);
        }
        return builder.endVector();
    };
    QuantizationParameters.startZeroPointVector = function (builder, numElems) {
        builder.startVector(8, numElems, 8);
    };
    QuantizationParameters.addDetailsType = function (builder, detailsType) {
        builder.addFieldInt8(4, detailsType, quantization_details_1.QuantizationDetails.NONE);
    };
    QuantizationParameters.addDetails = function (builder, detailsOffset) {
        builder.addFieldOffset(5, detailsOffset, 0);
    };
    QuantizationParameters.addQuantizedDimension = function (builder, quantizedDimension) {
        builder.addFieldInt32(6, quantizedDimension, 0);
    };
    QuantizationParameters.endQuantizationParameters = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    QuantizationParameters.createQuantizationParameters = function (builder, minOffset, maxOffset, scaleOffset, zeroPointOffset, detailsType, detailsOffset, quantizedDimension) {
        QuantizationParameters.startQuantizationParameters(builder);
        QuantizationParameters.addMin(builder, minOffset);
        QuantizationParameters.addMax(builder, maxOffset);
        QuantizationParameters.addScale(builder, scaleOffset);
        QuantizationParameters.addZeroPoint(builder, zeroPointOffset);
        QuantizationParameters.addDetailsType(builder, detailsType);
        QuantizationParameters.addDetails(builder, detailsOffset);
        QuantizationParameters.addQuantizedDimension(builder, quantizedDimension);
        return QuantizationParameters.endQuantizationParameters(builder);
    };
    return QuantizationParameters;
}());
exports.QuantizationParameters = QuantizationParameters;
