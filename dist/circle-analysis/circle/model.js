"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Model = void 0;
var flatbuffers = __importStar(require("flatbuffers"));
var buffer_1 = require("../circle/buffer");
var metadata_1 = require("../circle/metadata");
var operator_code_1 = require("../circle/operator-code");
var sub_graph_1 = require("../circle/sub-graph");
var Model = /** @class */ (function () {
    function Model() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Model.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Model.getRootAsModel = function (bb, obj) {
        return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Model.getSizePrefixedRootAsModel = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Model.bufferHasIdentifier = function (bb) {
        return bb.__has_identifier('CIR0');
    };
    Model.prototype.version = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    Model.prototype.operatorCodes = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new operator_code_1.OperatorCode()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Model.prototype.operatorCodesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Model.prototype.subgraphs = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new sub_graph_1.SubGraph()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Model.prototype.subgraphsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Model.prototype.description = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Model.prototype.buffers = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new buffer_1.Buffer()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Model.prototype.buffersLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Model.prototype.metadataBuffer = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Model.prototype.metadataBufferLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Model.prototype.metadataBufferArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Model.prototype.metadata = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? (obj || new metadata_1.Metadata()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Model.prototype.metadataLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Model.startModel = function (builder) {
        builder.startObject(7);
    };
    Model.addVersion = function (builder, version) {
        builder.addFieldInt32(0, version, 0);
    };
    Model.addOperatorCodes = function (builder, operatorCodesOffset) {
        builder.addFieldOffset(1, operatorCodesOffset, 0);
    };
    Model.createOperatorCodesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Model.startOperatorCodesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Model.addSubgraphs = function (builder, subgraphsOffset) {
        builder.addFieldOffset(2, subgraphsOffset, 0);
    };
    Model.createSubgraphsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Model.startSubgraphsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Model.addDescription = function (builder, descriptionOffset) {
        builder.addFieldOffset(3, descriptionOffset, 0);
    };
    Model.addBuffers = function (builder, buffersOffset) {
        builder.addFieldOffset(4, buffersOffset, 0);
    };
    Model.createBuffersVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Model.startBuffersVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Model.addMetadataBuffer = function (builder, metadataBufferOffset) {
        builder.addFieldOffset(5, metadataBufferOffset, 0);
    };
    Model.createMetadataBufferVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    Model.startMetadataBufferVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Model.addMetadata = function (builder, metadataOffset) {
        builder.addFieldOffset(6, metadataOffset, 0);
    };
    Model.createMetadataVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Model.startMetadataVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Model.endModel = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Model.finishModelBuffer = function (builder, offset) {
        builder.finish(offset, 'CIR0');
    };
    Model.finishSizePrefixedModelBuffer = function (builder, offset) {
        builder.finish(offset, 'CIR0', true);
    };
    Model.createModel = function (builder, version, operatorCodesOffset, subgraphsOffset, descriptionOffset, buffersOffset, metadataBufferOffset, metadataOffset) {
        Model.startModel(builder);
        Model.addVersion(builder, version);
        Model.addOperatorCodes(builder, operatorCodesOffset);
        Model.addSubgraphs(builder, subgraphsOffset);
        Model.addDescription(builder, descriptionOffset);
        Model.addBuffers(builder, buffersOffset);
        Model.addMetadataBuffer(builder, metadataBufferOffset);
        Model.addMetadata(builder, metadataOffset);
        return Model.endModel(builder);
    };
    return Model;
}());
exports.Model = Model;
