"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.SVDFOptions = void 0;
var flatbuffers = require("flatbuffers");
var activation_function_type_1 = require("../circle/activation-function-type");
var SVDFOptions = /** @class */ (function () {
    function SVDFOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SVDFOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SVDFOptions.getRootAsSVDFOptions = function (bb, obj) {
        return (obj || new SVDFOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SVDFOptions.getSizePrefixedRootAsSVDFOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SVDFOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SVDFOptions.prototype.rank = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    SVDFOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : activation_function_type_1.ActivationFunctionType.NONE;
    };
    SVDFOptions.prototype.asymmetricQuantizeInputs = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    SVDFOptions.startSVDFOptions = function (builder) {
        builder.startObject(3);
    };
    SVDFOptions.addRank = function (builder, rank) {
        builder.addFieldInt32(0, rank, 0);
    };
    SVDFOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(1, fusedActivationFunction, activation_function_type_1.ActivationFunctionType.NONE);
    };
    SVDFOptions.addAsymmetricQuantizeInputs = function (builder, asymmetricQuantizeInputs) {
        builder.addFieldInt8(2, +asymmetricQuantizeInputs, +false);
    };
    SVDFOptions.endSVDFOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SVDFOptions.createSVDFOptions = function (builder, rank, fusedActivationFunction, asymmetricQuantizeInputs) {
        SVDFOptions.startSVDFOptions(builder);
        SVDFOptions.addRank(builder, rank);
        SVDFOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        SVDFOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
        return SVDFOptions.endSVDFOptions(builder);
    };
    return SVDFOptions;
}());
exports.SVDFOptions = SVDFOptions;
