"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.RNNOptions = void 0;
var flatbuffers = require("flatbuffers");
var activation_function_type_1 = require("../circle/activation-function-type");
var RNNOptions = /** @class */ (function () {
    function RNNOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    RNNOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    RNNOptions.getRootAsRNNOptions = function (bb, obj) {
        return (obj || new RNNOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RNNOptions.getSizePrefixedRootAsRNNOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RNNOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RNNOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : activation_function_type_1.ActivationFunctionType.NONE;
    };
    RNNOptions.prototype.asymmetricQuantizeInputs = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    RNNOptions.startRNNOptions = function (builder) {
        builder.startObject(2);
    };
    RNNOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(0, fusedActivationFunction, activation_function_type_1.ActivationFunctionType.NONE);
    };
    RNNOptions.addAsymmetricQuantizeInputs = function (builder, asymmetricQuantizeInputs) {
        builder.addFieldInt8(1, +asymmetricQuantizeInputs, +false);
    };
    RNNOptions.endRNNOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    RNNOptions.createRNNOptions = function (builder, fusedActivationFunction, asymmetricQuantizeInputs) {
        RNNOptions.startRNNOptions(builder);
        RNNOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        RNNOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
        return RNNOptions.endRNNOptions(builder);
    };
    return RNNOptions;
}());
exports.RNNOptions = RNNOptions;
