"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.UnidirectionalSequenceLSTMOptions = void 0;
var flatbuffers = require("flatbuffers");
var activation_function_type_1 = require("../circle/activation-function-type");
var UnidirectionalSequenceLSTMOptions = /** @class */ (function () {
    function UnidirectionalSequenceLSTMOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    UnidirectionalSequenceLSTMOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    UnidirectionalSequenceLSTMOptions.getRootAsUnidirectionalSequenceLSTMOptions = function (bb, obj) {
        return (obj || new UnidirectionalSequenceLSTMOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    UnidirectionalSequenceLSTMOptions.getSizePrefixedRootAsUnidirectionalSequenceLSTMOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new UnidirectionalSequenceLSTMOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    UnidirectionalSequenceLSTMOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : activation_function_type_1.ActivationFunctionType.NONE;
    };
    UnidirectionalSequenceLSTMOptions.prototype.cellClip = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    UnidirectionalSequenceLSTMOptions.prototype.projClip = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    UnidirectionalSequenceLSTMOptions.prototype.timeMajor = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    UnidirectionalSequenceLSTMOptions.prototype.asymmetricQuantizeInputs = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    UnidirectionalSequenceLSTMOptions.startUnidirectionalSequenceLSTMOptions = function (builder) {
        builder.startObject(5);
    };
    UnidirectionalSequenceLSTMOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(0, fusedActivationFunction, activation_function_type_1.ActivationFunctionType.NONE);
    };
    UnidirectionalSequenceLSTMOptions.addCellClip = function (builder, cellClip) {
        builder.addFieldFloat32(1, cellClip, 0.0);
    };
    UnidirectionalSequenceLSTMOptions.addProjClip = function (builder, projClip) {
        builder.addFieldFloat32(2, projClip, 0.0);
    };
    UnidirectionalSequenceLSTMOptions.addTimeMajor = function (builder, timeMajor) {
        builder.addFieldInt8(3, +timeMajor, +false);
    };
    UnidirectionalSequenceLSTMOptions.addAsymmetricQuantizeInputs = function (builder, asymmetricQuantizeInputs) {
        builder.addFieldInt8(4, +asymmetricQuantizeInputs, +false);
    };
    UnidirectionalSequenceLSTMOptions.endUnidirectionalSequenceLSTMOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    UnidirectionalSequenceLSTMOptions.createUnidirectionalSequenceLSTMOptions = function (builder, fusedActivationFunction, cellClip, projClip, timeMajor, asymmetricQuantizeInputs) {
        UnidirectionalSequenceLSTMOptions.startUnidirectionalSequenceLSTMOptions(builder);
        UnidirectionalSequenceLSTMOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        UnidirectionalSequenceLSTMOptions.addCellClip(builder, cellClip);
        UnidirectionalSequenceLSTMOptions.addProjClip(builder, projClip);
        UnidirectionalSequenceLSTMOptions.addTimeMajor(builder, timeMajor);
        UnidirectionalSequenceLSTMOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
        return UnidirectionalSequenceLSTMOptions.endUnidirectionalSequenceLSTMOptions(builder);
    };
    return UnidirectionalSequenceLSTMOptions;
}());
exports.UnidirectionalSequenceLSTMOptions = UnidirectionalSequenceLSTMOptions;
