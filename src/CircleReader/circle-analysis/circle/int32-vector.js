"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.Int32Vector = void 0;
var flatbuffers = require("flatbuffers");
var Int32Vector = /** @class */ (function () {
    function Int32Vector() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Int32Vector.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Int32Vector.getRootAsInt32Vector = function (bb, obj) {
        return (obj || new Int32Vector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Int32Vector.getSizePrefixedRootAsInt32Vector = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Int32Vector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Int32Vector.prototype.values = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Int32Vector.prototype.valuesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Int32Vector.prototype.valuesArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Int32Vector.startInt32Vector = function (builder) {
        builder.startObject(1);
    };
    Int32Vector.addValues = function (builder, valuesOffset) {
        builder.addFieldOffset(0, valuesOffset, 0);
    };
    Int32Vector.createValuesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    Int32Vector.startValuesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Int32Vector.endInt32Vector = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Int32Vector.createInt32Vector = function (builder, valuesOffset) {
        Int32Vector.startInt32Vector(builder);
        Int32Vector.addValues(builder, valuesOffset);
        return Int32Vector.endInt32Vector(builder);
    };
    return Int32Vector;
}());
exports.Int32Vector = Int32Vector;
