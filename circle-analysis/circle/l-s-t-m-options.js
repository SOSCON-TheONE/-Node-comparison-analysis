"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.LSTMOptions = void 0;
var flatbuffers = require("flatbuffers");
var activation_function_type_1 = require("../circle/activation-function-type");
var l_s_t_m_kernel_type_1 = require("../circle/l-s-t-m-kernel-type");
var LSTMOptions = /** @class */ (function () {
    function LSTMOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    LSTMOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    LSTMOptions.getRootAsLSTMOptions = function (bb, obj) {
        return (obj || new LSTMOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LSTMOptions.getSizePrefixedRootAsLSTMOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new LSTMOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LSTMOptions.prototype.fusedActivationFunction = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : activation_function_type_1.ActivationFunctionType.NONE;
    };
    LSTMOptions.prototype.cellClip = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    LSTMOptions.prototype.projClip = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    LSTMOptions.prototype.kernelType = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : l_s_t_m_kernel_type_1.LSTMKernelType.FULL;
    };
    LSTMOptions.prototype.asymmetricQuantizeInputs = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    LSTMOptions.startLSTMOptions = function (builder) {
        builder.startObject(5);
    };
    LSTMOptions.addFusedActivationFunction = function (builder, fusedActivationFunction) {
        builder.addFieldInt8(0, fusedActivationFunction, activation_function_type_1.ActivationFunctionType.NONE);
    };
    LSTMOptions.addCellClip = function (builder, cellClip) {
        builder.addFieldFloat32(1, cellClip, 0.0);
    };
    LSTMOptions.addProjClip = function (builder, projClip) {
        builder.addFieldFloat32(2, projClip, 0.0);
    };
    LSTMOptions.addKernelType = function (builder, kernelType) {
        builder.addFieldInt8(3, kernelType, l_s_t_m_kernel_type_1.LSTMKernelType.FULL);
    };
    LSTMOptions.addAsymmetricQuantizeInputs = function (builder, asymmetricQuantizeInputs) {
        builder.addFieldInt8(4, +asymmetricQuantizeInputs, +false);
    };
    LSTMOptions.endLSTMOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    LSTMOptions.createLSTMOptions = function (builder, fusedActivationFunction, cellClip, projClip, kernelType, asymmetricQuantizeInputs) {
        LSTMOptions.startLSTMOptions(builder);
        LSTMOptions.addFusedActivationFunction(builder, fusedActivationFunction);
        LSTMOptions.addCellClip(builder, cellClip);
        LSTMOptions.addProjClip(builder, projClip);
        LSTMOptions.addKernelType(builder, kernelType);
        LSTMOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
        return LSTMOptions.endLSTMOptions(builder);
    };
    return LSTMOptions;
}());
exports.LSTMOptions = LSTMOptions;
