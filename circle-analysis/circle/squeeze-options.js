"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.SqueezeOptions = void 0;
var flatbuffers = require("flatbuffers");
var SqueezeOptions = /** @class */ (function () {
    function SqueezeOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SqueezeOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SqueezeOptions.getRootAsSqueezeOptions = function (bb, obj) {
        return (obj || new SqueezeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SqueezeOptions.getSizePrefixedRootAsSqueezeOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SqueezeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SqueezeOptions.prototype.squeezeDims = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    SqueezeOptions.prototype.squeezeDimsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SqueezeOptions.prototype.squeezeDimsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    SqueezeOptions.startSqueezeOptions = function (builder) {
        builder.startObject(1);
    };
    SqueezeOptions.addSqueezeDims = function (builder, squeezeDimsOffset) {
        builder.addFieldOffset(0, squeezeDimsOffset, 0);
    };
    SqueezeOptions.createSqueezeDimsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    SqueezeOptions.startSqueezeDimsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SqueezeOptions.endSqueezeOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SqueezeOptions.createSqueezeOptions = function (builder, squeezeDimsOffset) {
        SqueezeOptions.startSqueezeOptions(builder);
        SqueezeOptions.addSqueezeDims(builder, squeezeDimsOffset);
        return SqueezeOptions.endSqueezeOptions(builder);
    };
    return SqueezeOptions;
}());
exports.SqueezeOptions = SqueezeOptions;
