"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.WhileOptions = void 0;
var flatbuffers = require("flatbuffers");
var WhileOptions = /** @class */ (function () {
    function WhileOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    WhileOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    WhileOptions.getRootAsWhileOptions = function (bb, obj) {
        return (obj || new WhileOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    WhileOptions.getSizePrefixedRootAsWhileOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new WhileOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    WhileOptions.prototype.condSubgraphIndex = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    WhileOptions.prototype.bodySubgraphIndex = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    WhileOptions.startWhileOptions = function (builder) {
        builder.startObject(2);
    };
    WhileOptions.addCondSubgraphIndex = function (builder, condSubgraphIndex) {
        builder.addFieldInt32(0, condSubgraphIndex, 0);
    };
    WhileOptions.addBodySubgraphIndex = function (builder, bodySubgraphIndex) {
        builder.addFieldInt32(1, bodySubgraphIndex, 0);
    };
    WhileOptions.endWhileOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    WhileOptions.createWhileOptions = function (builder, condSubgraphIndex, bodySubgraphIndex) {
        WhileOptions.startWhileOptions(builder);
        WhileOptions.addCondSubgraphIndex(builder, condSubgraphIndex);
        WhileOptions.addBodySubgraphIndex(builder, bodySubgraphIndex);
        return WhileOptions.endWhileOptions(builder);
    };
    return WhileOptions;
}());
exports.WhileOptions = WhileOptions;
