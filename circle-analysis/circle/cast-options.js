"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.CastOptions = void 0;
var flatbuffers = require("flatbuffers");
var tensor_type_1 = require("../circle/tensor-type");
var CastOptions = /** @class */ (function () {
    function CastOptions() {
        this.bb = null;
        this.bb_pos = 0;
    }
    CastOptions.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    CastOptions.getRootAsCastOptions = function (bb, obj) {
        return (obj || new CastOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CastOptions.getSizePrefixedRootAsCastOptions = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CastOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CastOptions.prototype.inDataType = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : tensor_type_1.TensorType.FLOAT32;
    };
    CastOptions.prototype.outDataType = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : tensor_type_1.TensorType.FLOAT32;
    };
    CastOptions.startCastOptions = function (builder) {
        builder.startObject(2);
    };
    CastOptions.addInDataType = function (builder, inDataType) {
        builder.addFieldInt8(0, inDataType, tensor_type_1.TensorType.FLOAT32);
    };
    CastOptions.addOutDataType = function (builder, outDataType) {
        builder.addFieldInt8(1, outDataType, tensor_type_1.TensorType.FLOAT32);
    };
    CastOptions.endCastOptions = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    CastOptions.createCastOptions = function (builder, inDataType, outDataType) {
        CastOptions.startCastOptions(builder);
        CastOptions.addInDataType(builder, inDataType);
        CastOptions.addOutDataType(builder, outDataType);
        return CastOptions.endCastOptions(builder);
    };
    return CastOptions;
}());
exports.CastOptions = CastOptions;
