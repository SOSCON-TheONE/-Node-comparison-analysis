"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubGraph = void 0;
var flatbuffers = __importStar(require("flatbuffers"));
var data_format_1 = require("../circle/data-format");
var operator_1 = require("../circle/operator");
var tensor_1 = require("../circle/tensor");
var SubGraph = /** @class */ (function () {
    function SubGraph() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SubGraph.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SubGraph.getRootAsSubGraph = function (bb, obj) {
        return (obj || new SubGraph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SubGraph.getSizePrefixedRootAsSubGraph = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SubGraph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SubGraph.prototype.tensors = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new tensor_1.Tensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    SubGraph.prototype.tensorsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SubGraph.prototype.inputs = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    SubGraph.prototype.inputsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SubGraph.prototype.inputsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    SubGraph.prototype.outputs = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    SubGraph.prototype.outputsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SubGraph.prototype.outputsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    SubGraph.prototype.operators = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new operator_1.Operator()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    SubGraph.prototype.operatorsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SubGraph.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    SubGraph.prototype.dataFormat = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : data_format_1.DataFormat.CHANNELS_LAST;
    };
    SubGraph.startSubGraph = function (builder) {
        builder.startObject(6);
    };
    SubGraph.addTensors = function (builder, tensorsOffset) {
        builder.addFieldOffset(0, tensorsOffset, 0);
    };
    SubGraph.createTensorsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    SubGraph.startTensorsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SubGraph.addInputs = function (builder, inputsOffset) {
        builder.addFieldOffset(1, inputsOffset, 0);
    };
    SubGraph.createInputsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    SubGraph.startInputsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SubGraph.addOutputs = function (builder, outputsOffset) {
        builder.addFieldOffset(2, outputsOffset, 0);
    };
    SubGraph.createOutputsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    SubGraph.startOutputsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SubGraph.addOperators = function (builder, operatorsOffset) {
        builder.addFieldOffset(3, operatorsOffset, 0);
    };
    SubGraph.createOperatorsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    SubGraph.startOperatorsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    SubGraph.addName = function (builder, nameOffset) {
        builder.addFieldOffset(4, nameOffset, 0);
    };
    SubGraph.addDataFormat = function (builder, dataFormat) {
        builder.addFieldInt8(5, dataFormat, data_format_1.DataFormat.CHANNELS_LAST);
    };
    SubGraph.endSubGraph = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SubGraph.createSubGraph = function (builder, tensorsOffset, inputsOffset, outputsOffset, operatorsOffset, nameOffset, dataFormat) {
        SubGraph.startSubGraph(builder);
        SubGraph.addTensors(builder, tensorsOffset);
        SubGraph.addInputs(builder, inputsOffset);
        SubGraph.addOutputs(builder, outputsOffset);
        SubGraph.addOperators(builder, operatorsOffset);
        SubGraph.addName(builder, nameOffset);
        SubGraph.addDataFormat(builder, dataFormat);
        return SubGraph.endSubGraph(builder);
    };
    return SubGraph;
}());
exports.SubGraph = SubGraph;
