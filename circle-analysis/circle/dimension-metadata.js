"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.DimensionMetadata = void 0;
var flatbuffers = require("flatbuffers");
var dimension_type_1 = require("../circle/dimension-type");
var sparse_index_vector_1 = require("../circle/sparse-index-vector");
var DimensionMetadata = /** @class */ (function () {
    function DimensionMetadata() {
        this.bb = null;
        this.bb_pos = 0;
    }
    DimensionMetadata.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    DimensionMetadata.getRootAsDimensionMetadata = function (bb, obj) {
        return (obj || new DimensionMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DimensionMetadata.getSizePrefixedRootAsDimensionMetadata = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DimensionMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DimensionMetadata.prototype.format = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : dimension_type_1.DimensionType.DENSE;
    };
    DimensionMetadata.prototype.denseSize = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    DimensionMetadata.prototype.arraySegmentsType = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : sparse_index_vector_1.SparseIndexVector.NONE;
    };
    DimensionMetadata.prototype.arraySegments = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    DimensionMetadata.prototype.arrayIndicesType = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : sparse_index_vector_1.SparseIndexVector.NONE;
    };
    DimensionMetadata.prototype.arrayIndices = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    DimensionMetadata.startDimensionMetadata = function (builder) {
        builder.startObject(6);
    };
    DimensionMetadata.addFormat = function (builder, format) {
        builder.addFieldInt8(0, format, dimension_type_1.DimensionType.DENSE);
    };
    DimensionMetadata.addDenseSize = function (builder, denseSize) {
        builder.addFieldInt32(1, denseSize, 0);
    };
    DimensionMetadata.addArraySegmentsType = function (builder, arraySegmentsType) {
        builder.addFieldInt8(2, arraySegmentsType, sparse_index_vector_1.SparseIndexVector.NONE);
    };
    DimensionMetadata.addArraySegments = function (builder, arraySegmentsOffset) {
        builder.addFieldOffset(3, arraySegmentsOffset, 0);
    };
    DimensionMetadata.addArrayIndicesType = function (builder, arrayIndicesType) {
        builder.addFieldInt8(4, arrayIndicesType, sparse_index_vector_1.SparseIndexVector.NONE);
    };
    DimensionMetadata.addArrayIndices = function (builder, arrayIndicesOffset) {
        builder.addFieldOffset(5, arrayIndicesOffset, 0);
    };
    DimensionMetadata.endDimensionMetadata = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    DimensionMetadata.createDimensionMetadata = function (builder, format, denseSize, arraySegmentsType, arraySegmentsOffset, arrayIndicesType, arrayIndicesOffset) {
        DimensionMetadata.startDimensionMetadata(builder);
        DimensionMetadata.addFormat(builder, format);
        DimensionMetadata.addDenseSize(builder, denseSize);
        DimensionMetadata.addArraySegmentsType(builder, arraySegmentsType);
        DimensionMetadata.addArraySegments(builder, arraySegmentsOffset);
        DimensionMetadata.addArrayIndicesType(builder, arrayIndicesType);
        DimensionMetadata.addArrayIndices(builder, arrayIndicesOffset);
        return DimensionMetadata.endDimensionMetadata(builder);
    };
    return DimensionMetadata;
}());
exports.DimensionMetadata = DimensionMetadata;
