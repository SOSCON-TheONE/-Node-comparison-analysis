"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperatorCode = void 0;
var flatbuffers = __importStar(require("flatbuffers"));
var builtin_operator_1 = require("../circle/builtin-operator");
var OperatorCode = /** @class */ (function () {
    function OperatorCode() {
        this.bb = null;
        this.bb_pos = 0;
    }
    OperatorCode.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    OperatorCode.getRootAsOperatorCode = function (bb, obj) {
        return (obj || new OperatorCode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    OperatorCode.getSizePrefixedRootAsOperatorCode = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new OperatorCode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    OperatorCode.prototype.builtinCode = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : builtin_operator_1.BuiltinOperator.ADD;
    };
    OperatorCode.prototype.customCode = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    OperatorCode.prototype.version = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 1;
    };
    OperatorCode.startOperatorCode = function (builder) {
        builder.startObject(3);
    };
    OperatorCode.addBuiltinCode = function (builder, builtinCode) {
        builder.addFieldInt8(0, builtinCode, builtin_operator_1.BuiltinOperator.ADD);
    };
    OperatorCode.addCustomCode = function (builder, customCodeOffset) {
        builder.addFieldOffset(1, customCodeOffset, 0);
    };
    OperatorCode.addVersion = function (builder, version) {
        builder.addFieldInt32(2, version, 1);
    };
    OperatorCode.endOperatorCode = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    OperatorCode.createOperatorCode = function (builder, builtinCode, customCodeOffset, version) {
        OperatorCode.startOperatorCode(builder);
        OperatorCode.addBuiltinCode(builder, builtinCode);
        OperatorCode.addCustomCode(builder, customCodeOffset);
        OperatorCode.addVersion(builder, version);
        return OperatorCode.endOperatorCode(builder);
    };
    return OperatorCode;
}());
exports.OperatorCode = OperatorCode;
